version: "3.9"
services:
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports: ["5672:5672", "15672:15672"]
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 10

  postgres:
    image: postgres:16
    container_name: inventory-postgres
    environment:
      POSTGRES_USER: inventory
      POSTGRES_PASSWORD: inventory
      POSTGRES_DB: inventory
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory"]
      interval: 10s
      timeout: 5s
      retries: 10

  store-postgres:
    image: postgres:16
    container_name: store-postgres
    environment:
      POSTGRES_USER: store
      POSTGRES_PASSWORD: store
      POSTGRES_DB: store
    ports: [ "5433:5432" ]   # expone 5433 en tu host para que no choque con el central
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U store" ]
      interval: 10s
      timeout: 5s
      retries: 10

  central-service:
    build: ./central-service-sb
    depends_on:
      rabbitmq: { condition: service_healthy }
      postgres: { condition: service_healthy }
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports: ["8082:8080"]

  store-service:
    build: ./store-service-sb
    depends_on:
      rabbitmq: { condition: service_healthy }
      store-postgres: { condition: service_healthy }
    environment:
      SPRING_PROFILES_ACTIVE: docker
      STORE_ID: bog-01
    ports: ["8081:8080"]
